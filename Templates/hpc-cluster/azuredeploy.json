{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "portalDnsNameLabel": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "The DNS name label. This label should be globally unique or leave empty then the deployment process will generate an unique string."
      }
    },
    "frontendServiceSku": {
      "defaultValue": "S1 Standard",
      "allowedValues": [
        "B1 Basic",
        "B2 Basic",
        "B3 Basic",
        "S1 Standard",
        "S2 Standard",
        "S3 Standard",
        "P1v2 PremiumV2",
        "P2v2 PremiumV2",
        "P3v2 PremiumV2"
      ],
      "type": "string",
      "metadata": {
        "description": "The sku name of App service plan for the frontend service"
      }
    },
    "portalAnonymousAccess": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Specify whether you want to enable the anonymous access for the ACM portal. Choose 'Yes' only for testing purpose."
      }
    },
    "aadAuthApplicationId": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "The existing authentication application Id used to logon the portal if specified"
      }
    },
    "aadTenantId": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "The Id of the tenant in which the authentication application locates. If not specified, the current tenantId is used"
      }
    },
    "frontendImageName": {
      "defaultValue": "mcr.microsoft.com/hpcpack/hpcacm:frontend",
      "type": "string",
      "metadata": {
        "description": "Name for the frontend image"
      }
    },
    "jobMonitorImageName": {
      "defaultValue": "mcr.microsoft.com/hpcpack/hpcacm:jobmonitor",
      "type": "string",
      "metadata": {
        "description": "Name for the jobmonitor image"
      }
    },
    "jobMonitorCpuCores": {
      "defaultValue": "1.0",
      "type": "string",
      "metadata": {
        "description": "The number of CPU cores to allocate to the jobmonitor container instance."
      }
    },
    "jobMonitorMemoryInGb": {
      "defaultValue": "1.5",
      "type": "string",
      "metadata": {
        "description": "The amount of memory in GB to allocate to the jobmonitor container instance."
      }
    },
    "taskDispatcherImageName": {
      "defaultValue": "mcr.microsoft.com/hpcpack/hpcacm:taskdispatcher",
      "type": "string",
      "metadata": {
        "description": "Name for the taskdispatcher image"
      }
    },
    "taskDispatcherCpuCores": {
      "defaultValue": "1.0",
      "type": "string",
      "metadata": {
        "description": "The number of CPU cores to allocate to the taskDispatcher container instance."
      }
    },
    "taskDispatcherMemoryInGb": {
      "defaultValue": "1.5",
      "type": "string",
      "metadata": {
        "description": "The amount of memory in GB to allocate to the taskDispatcher container instance."
      }
    },
    "dashboardImageName": {
      "defaultValue": "mcr.microsoft.com/hpcpack/hpcacm:dashboard",
      "type": "string",
      "metadata": {
        "description": "Name for the dashboard image"
      }
    },
    "dashboardCpuCores": {
      "defaultValue": "1.0",
      "type": "string",
      "metadata": {
        "description": "The number of CPU cores to allocate to the dashboard container instance."
      }
    },
    "dashboardMemoryInGb": {
      "defaultValue": "1.5",
      "type": "string",
      "metadata": {
        "description": "The amount of memory in GB to allocate to the dashboard container instance."
      }
    },
    "storageAccountType": {
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "type": "string",
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "storageAccountName": {
      "defaultValue": "[uniquestring(resourceGroup().id, 'storage')]",
      "type": "string",
      "metadata": {
        "description": "Storage Account Name"
      }
    },
    "storageAccountResourceGroup": {
      "defaultValue": "[resourceGroup().name]",
      "type": "string",
      "metadata": {
        "description": "Resource group in which the storage account locates"
      }
    },
    "newOrExistingStorageAccount": {
      "defaultValue": "new",
      "type": "string",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Resource group in which the storage account locates"
      }
    },
    "dockerRegistryServer": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Docker registry server without protocol (http or https), must specified togerther with 'dockerRegistryUsername' and 'dockerRegistryPassword'"
      }
    },
    "dockerRegistryUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Docker registry user name."
      }
    },
    "dockerRegistryPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Docker registry user password."
      }
    },
    "scheduler": {
      "defaultValue": "Slurm_18.08",
      "allowedValues": [
        "Slurm_15.08",
        "Slurm_16.05",
        "Slurm 17.02",
        "Slurm_17.11",
        "Slurm_18.08",
        "PBSPro_14.1",
        "PBSPro_18.1",
        "None"
      ],
      "type": "string",
      "metadata": {
        "description": "HPC scheduler to install."
      }
    },
    "adminUserName": {
      "defaultValue": "azureuser",
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
      }
    },
    "adminPassword": {
      "defaultValue": "",
      "type": "securestring",
      "metadata": {
        "description": "Admin password. Pick a complex password with uppercase letters, lowercase letters, digits, and symbols. The password should not be longer than 16. Otherwise you'll get a BadRequest error."
      }
    },
    "hpcUserName": {
      "defaultValue": "hpcuser",
      "type": "string",
      "metadata": {
        "description": "User for running HPC applications with shared home directory and SSH public key authentication setup.  This user cannot login from outside the cluster. Pick a valid username otherwise there will be a BadRequest error."
      }
    },
    "hpcNodeImage": {
      "defaultValue": "CentOS_7.3",
      "allowedValues": [
        "CentOS_7.1",
        "CentOS_7.2",
        "CentOS_7.3",
        "CentOS_7.4",
        "CentOS_7.5",
        "CentOS_7.1_HPC",
        "CentOS_7.3_HPC",
        "CentOS_7.4_HPC",
        "Other"
      ],
      "type": "string",
      "metadata": {
        "description": "The OS image, if you choose an image with '_HPC' suffix, make sure you choose the RDMA capable VM size for both head node and worker nodes."
      }
    },
    "otherHpcNodeImage": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Specify the CentOS 7.x VM image in the format of 'ImagePublisher/ImageOffer/ImageSku' for Marketplace image or 'ResourceGroupName/ImageName' for private image if you choose 'Other' above, add suffix ':RDMA' if RDMA driver is installed."
      }
    },
    "headNodeName": {
      "defaultValue": "master",
      "type": "string",
      "metadata": {
        "description": "The VM name of head node."
      }
    },
    "headNodeSize": {
      "defaultValue": "Standard_D4_v3",
      "allowedValues": [
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D64s_v3",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D64_v3",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_A8",
        "Standard_A9",
        "Standard_H8",
        "Standard_H16",
        "Standard_H8m",
        "Standard_H16m",
        "Standard_H16r",
        "Standard_H16mr",
        "Standard_NV6s_v2",
        "Standard_NV12s_v2",
        "Standard_NV24s_v2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2"
      ],
      "type": "string",
      "metadata": {
        "description": "Size of the head node."
      }
    },
    "headNodeOsDiskType": {
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS"
      ],
      "type": "string",
      "metadata": {
        "description": "Head node OS disk type"
      }
    },
    "workerNodeNamePrefix": {
      "defaultValue": "worker",
      "type": "string",
      "metadata": {
        "description": "The VM name prefix of the work nodes."
      }
    },
    "workerNodeSize": {
      "defaultValue": "Standard_D4_v3",
      "allowedValues": [
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D64s_v3",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D32_v3",
        "Standard_D64_v3",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_A8",
        "Standard_A9",
        "Standard_H8",
        "Standard_H16",
        "Standard_H8m",
        "Standard_H16m",
        "Standard_H16r",
        "Standard_H16mr",
        "Standard_NV6s_v2",
        "Standard_NV12s_v2",
        "Standard_NV24s_v2",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2"
      ],
      "type": "string",
      "metadata": {
        "description": "Size of the worker nodes."
      }
    },
    "workerNodeOsDiskType": {
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS"
      ],
      "type": "string",
      "metadata": {
        "description": "Worker node OS disk type"
      }
    },
    "workerNodeCount": {
      "defaultValue": 2,
      "type": "int",
      "metadata": {
        "description": "This template creates N worker node. Use workerNodeCount to specify that N."
      }
    },
    "dataDiskSize": {
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096
      ],
      "type": "int",
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM.  A RAID-0 volume is created with all data disks that is dataDiskSize * dataDiskCount in size."
      }
    },
    "headNodeDataDiskCount": {
      "defaultValue": 1,
      "allowedValues": [
        0,
        1,
        2,
        4,
        8
      ],
      "type": "int",
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM.  A RAID-0 volume is created with all data disks that is dataDiskSize * dataDiskCount in size."
      }
    },
    "headNodeDataDiskType": {
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS",
        "UltraSSD_LRS"
      ],
      "type": "string",
      "metadata": {
        "description": "Head node data disk type"
      }
    },
    "workerNodeDataDiskCount": {
      "defaultValue": 0,
      "allowedValues": [
        0,
        1,
        2,
        4,
        8
      ],
      "type": "int",
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the VM.  A RAID-0 volume is created with all data disks that is dataDiskSize * dataDiskCount in size."
      }
    },
    "workerNodeDataDiskType": {
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS",
        "UltraSSD_LRS"
      ],
      "type": "string",
      "metadata": {
        "description": "Worker node data disk type"
      }
    },
    "installEasybuild": {
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "type": "string",
      "metadata": {
        "description": "Install the EasyBuild framework."
      }
    },
    "clusterFilesystem": {
      "defaultValue": "None:None",
      "allowedValues": [
        "BeeGFS:Storage",
        "BeeGFS:SSD",
        "None:None"
      ],
      "type": "string",
      "metadata": {
        "description": "Path to use for BeeGFS storage."
      }
    }
  },
  "variables": {
    "adminPassword": "[if(and(not(equals(parameters('scheduler'), 'None')), empty(parameters('adminPassword'))), json('null'), parameters('adminPassword'))]",
    "schedulers": {
      "Slurm_15.08": "Slurm_15.08.13-1",
      "Slurm_16.05": "Slurm_16.05.11-1",
      "Slurm 17.02": "Slurm_17.02.11-1",
      "Slurm_17.11": "Slurm_17.11.12-1",
      "Slurm_18.08": "Slurm_18.08.4-1",
      "PBSPro_14.1": "PBSPro_14.1.0",
      "PBSPro_18.1": "PBSPro_18.1.3",
      "None": "None"
    },
    "linuxNodeImages": {
      "CentOS_7.1": "OpenLogic/CentOS/7.1",
      "CentOS_7.2": "OpenLogic/CentOS/7.2",
      "CentOS_7.3": "OpenLogic/CentOS/7.3",
      "CentOS_7.4": "OpenLogic/CentOS/7.4",
      "CentOS_7.5": "OpenLogic/CentOS/7.5",
      "CentOS_7.1_HPC": "OpenLogic/CentOS-HPC/7.1:RDMA",
      "CentOS_7.3_HPC": "OpenLogic/CentOS-HPC/7.1:RDMA",
      "CentOS_7.4_HPC": "OpenLogic/CentOS-HPC/7.1:RDMA",
      "Other": "Other"
    },
    "hpcNodeImage": "[if(equals(parameters('hpcNodeImage'), 'Other'), parameters('otherHpcNodeImage'), variables('linuxNodeImages')[parameters('hpcNodeImage')])]",
    "artifactsBaseUrl": "https://raw.githubusercontent.com/sunbinzhu/azure-hpc/master/Templates/hpc-cluster/"
  },
  "resources": [
    {
      "apiVersion": "2018-05-01",
      "type": "Microsoft.Resources/deployments",
      "name": "mainTemplate",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[uri(variables('artifactsBaseUrl'), 'mainTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "portalDnsNameLabel": {
            "value": "[parameters('portalDnsNameLabel')]"
          },
          "appServicePlanPricingTier": {
            "value": "[parameters('frontendServiceSku')]"
          },
          "portalAnonymousAccess": {
            "value": "[equals(parameters('portalAnonymousAccess'), 'Yes')]"
          },
          "aadAuthApplicationId": {
            "value": "[parameters('aadAuthApplicationId')]"
          },
          "aadTenantId": {
            "value": "[parameters('aadTenantId')]"
          },
          "frontendImageName": {
            "value": "[parameters('frontendImageName')]"
          },
          "jobMonitorImageName": {
            "value": "[parameters('jobMonitorImageName')]"
          },
          "jobMonitorCpuCores": {
            "value": "[parameters('jobMonitorCpuCores')]"
          },
          "jobMonitorMemoryInGb": {
            "value": "[parameters('jobMonitorMemoryInGb')]"
          },
          "taskDispatcherImageName": {
            "value": "[parameters('taskDispatcherImageName')]"
          },
          "taskDispatcherCpuCores": {
            "value": "[parameters('taskDispatcherCpuCores')]"
          },
          "taskDispatcherMemoryInGb": {
            "value": "[parameters('taskDispatcherMemoryInGb')]"
          },
          "dashboardImageName": {
            "value": "[parameters('dashboardImageName')]"
          },
          "dashboardCpuCores": {
            "value": "[parameters('dashboardCpuCores')]"
          },
          "dashboardMemoryInGb": {
            "value": "[parameters('dashboardMemoryInGb')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "storageAccountResourceGroup": {
            "value": "[parameters('storageAccountResourceGroup')]"
          },
          "storageAccountType": {
            "value": "[parameters('storageAccountType')]"
          },
          "newOrExistingStorageAccount": {
            "value": "[parameters('newOrExistingStorageAccount')]"
          },
          "dockerRegistryServer": {
            "value": "[parameters('dockerRegistryServer')]"
          },
          "dockerRegistryUsername": {
            "value": "[parameters('dockerRegistryUsername')]"
          },
          "dockerRegistryPassword": {
            "value": "[parameters('dockerRegistryPassword')]"
          },
          "scheduler": {
            "value": "[variables('schedulers')[parameters('scheduler')]]"
          },
          "adminUserName": {
            "value": "[parameters('adminUserName')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "hpcUserName": {
            "value": "[parameters('hpcUserName')]"
          },
          "hpcNodeImage": {
            "value": "[variables('hpcNodeImage')]"
          },
          "headNodeName": {
            "value": "[parameters('headNodeName')]"
          },
          "headNodeSize": {
            "value": "[parameters('headNodeSize')]"
          },
          "headNodeOsDiskType": {
            "value": "[parameters('headNodeOsDiskType')]"
          },
          "headNodeDataDiskCount": {
            "value": "[parameters('headNodeDataDiskCount')]"
          },
          "headNodeDataDiskType": {
            "value": "[parameters('headNodeDataDiskType')]"
          },
          "headNodeDataDiskSize": {
            "value": "[parameters('dataDiskSize')]"
          },
          "workerNodeNamePrefix": {
            "value": "[parameters('workerNodeNamePrefix')]"
          },
          "workerNodeSize": {
            "value": "[parameters('workerNodeSize')]"
          },
          "workerNodeCount": {
            "value": "[parameters('workerNodeCount')]"
          },
          "workerNodeOsDiskType": {
            "value": "[parameters('workerNodeOsDiskType')]"
          },
          "workerNodeDataDiskCount": {
            "value": "[parameters('workerNodeDataDiskCount')]"
          },
          "workerNodeDataDiskType": {
            "value": "[parameters('workerNodeDataDiskType')]"
          },
          "workerNodeDataDiskSize": {
            "value": "[parameters('dataDiskSize')]"
          },
          "installEasybuild": {
            "value": "[parameters('installEasybuild')]"
          },
          "clusterFilesystem": {
            "value": "[parameters('clusterFilesystem')]"
          },
          "location": {
            "value": "[resourceGroup().location]"
          },
          "_artifactsLocation": {
            "value": "[variables('artifactsBaseUrl')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "portalUri": {
      "type": "string",
      "value": "[reference('mainTemplate').outputs.portalUri.value]"
    }
  }
}