{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "scheduler": {
      "type": "string",
      "metadata": {
        "description": "HPC scheduler to install."
      }
    },
    "adminUserName": {
      "defaultValue": "azureuser",
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
      }
    },
    "adminPassword": {
      "defaultValue": "",
      "type": "securestring",
      "metadata": {
        "description": "Admin password. Pick a complex password with uppercase letters, lowercase letters, digits, and symbols."
      }
    },
    "adminSshPublicKey": {
      "defaultValue": "",
      "type": "securestring",
      "metadata": {
        "description": "An RSA SSH public key for the admin user. Either adminPassword or adminSshPublicKey must be specified"
      }
    },
    "hpcUserName": {
      "defaultValue": "hpcuser",
      "type": "string",
      "metadata": {
        "description": "User for running HPC applications with shared home directory and SSH public key authentication setup.  This user cannot login from outside the cluster if 'hpcUserSshPublicKey' not specified. Pick a valid username otherwise there will be a BadRequest error."
      }
    },
    "hpcUserSshPublicKey": {
      "defaultValue": "",
      "type": "securestring",
      "metadata": {
        "description": "An RSA SSH public key for the HPC User. An RSA key pair will be automatically generated if not specified"
      }
    },
    "nodeImage": {
      "type": "object",
      "metadata": {
        "description": "The VM image for the compute nodes"
      }
    },
    "rdmaDriverInstalled": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "Specify whether RDMA driver installed in the VM image"
      }
    },
    "headNodeName": {
      "defaultValue": "master",
      "type": "string",
      "metadata": {
        "description": "The VM name of head node."
      }
    },
    "headNodeSize": {
      "defaultValue": "Standard_D4_v3",
      "type": "string",
      "metadata": {
        "description": "VM Size of the head node."
      }
    },
    "headNodeOsDiskType": {
      "defaultValue": "Standard_LRS",
      "type": "string",
      "metadata": {
        "description": "Head node OS Disk type"
      }
    },
    "headNodeDataDiskSize": {
      "defaultValue": 128,
      "type": "int",
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the head node VM."
      }
    },
    "headNodeDataDiskCount": {
      "defaultValue": 0,
      "type": "int",
      "metadata": {
        "description": "The count of data disks attached to the head node VM.  A RAID-0 volume is created with all data disks if the count is 2 or more."
      }
    },
    "headNodeDataDiskType": {
      "defaultValue": "Standard_LRS",
      "type": "string",
      "metadata": {
        "description": "Head node data disk type"
      }
    },
    "workerNodeNamePrefix": {
      "defaultValue": "worker",
      "type": "string",
      "metadata": {
        "description": "The VM name prefix of the work nodes."
      }
    },
    "workerNodeCount": {
      "defaultValue": 2,
      "type": "int",
      "metadata": {
        "description": "This template creates N worker node. Use workerNodeCount to specify that N."
      }
    },
    "workerNodeSize": {
      "defaultValue": "Standard_D4_v3",
      "type": "string",
      "metadata": {
        "description": "VM Size of the worker nodes."
      }
    },
    "workerNodeOsDiskType": {
      "defaultValue": "Standard_LRS",
      "type": "string",
      "metadata": {
        "description": "Worker node OS disk type"
      }
    },
    "workerNodeDataDiskSize": {
      "defaultValue": 128,
      "type": "int",
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the worker node VM."
      }
    },
    "workerNodeDataDiskCount": {
      "defaultValue": 0,
      "type": "int",
      "metadata": {
        "description": "The count of data disks attached to each worker node VM.  A RAID-0 volume is created with all data disks if the count is 2 or more."
      }
    },
    "workerNodeDataDiskType": {
      "defaultValue": "Standard_LRS",
      "type": "string",
      "metadata": {
        "description": "Worker node data disk type"
      }
    },
    "installEasybuild": {
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "type": "string",
      "metadata": {
        "description": "Install the EasyBuild framework."
      }
    },
    "clusterFilesystem": {
      "defaultValue": "None:None",
      "allowedValues": [
        "BeeGFS:Storage",
        "BeeGFS:SSD",
        "None:None"
      ],
      "type": "string",
      "metadata": {
        "description": "Path to use for BeeGFS storage."
      }
    },
    "acmStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "ACM Storage Account Name"
      }
    },
    "acmStorageAccountResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource group in which the ACM storage account locates"
      }
    },
    "publicIPCreateOption": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "none",
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Indicates whether to create the public IP address"
      }
    },
    "publicIPResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group for the public IP address resource, shall be specified only when 'publicIPCreateOption' is specified as 'existing'"
      }
    },
    "publicIPName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the public IP address, used only when 'publicIPCreateOption' is specified as 'existing' or 'new'"
      }
    },
    "publicIPSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "The sku of the public IP address, used only when 'publicIPCreateOption' is specified as 'new'"
      }
    },
    "publicIPDNSNameLabel": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The DNS name label of the public IP address, used only when 'publicIPCreateOption' is specified as 'new'"
      }
    },
    "publicIPAllocationMethod": {
      "type": "string",
      "defaultValue": "Dynamic",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "The IP allocation method for the public IP address"
      }
    },
    "scriptBaseLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts (nested templates or scripts) required by this template are located."
      }
    },
    "scriptBaseLocationSasToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation."
      }
    },
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "type": "string",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "nsgName": "[concat(parameters('headNodeName'), '-nsg')]",
    "publicIPAddressName": "[if(empty(parameters('publicIPName')), concat(parameters('headNodeName'), '-publicip'), parameters('publicIPName'))]",
    "publicIPDnsSettings": {
      "domainNameLabel": "[parameters('publicIPDNSNameLabel')]"
    },
    "avSetName": "[concat(parameters('headNodeName'), '-avSet')]",
    "networkSettings": {
      "virtualNetworkName": "[concat(parameters('headNodeName'), '-VNet')]",
      "addressPrefix": "10.0.0.0/16",
      "subnet": {
        "dse": {
          "name": "dse",
          "prefix": "10.0.0.0/24",
          "vnet": "virtualnetwork"
        }
      },
      "statics": {
        "workerRange": {
          "base": "10.0.0.",
          "start": 5
        },
        "master": "10.0.0.254"
      }
    },
    "headNodeNicName": "[concat('nic-', parameters('headNodeName'))]",
    "emptyArray": [],
    "headNodeDataDisks": {
      "copy": [
        {
          "name": "hnDataDisks",
          "count": "[if(equals(parameters('headNodeDataDiskCount'), 0), 1, parameters('headNodeDataDiskCount'))]",
          "input": {
            "lun": "[copyIndex('hnDatadisks')]",
            "createOption": "Empty",
            "diskSizeGB": "[parameters('headNodeDataDiskSize')]",
            "managedDisk": {
              "storageAccountType": "[parameters('headNodeDataDiskType')]"
            }
          }
        }
      ]
    },
    "workerNodeDataDisks": {
      "copy": [
        {
          "name": "wnDatadisks",
          "count": "[if(equals(parameters('workerNodeDataDiskCount'), 0), 1, parameters('workerNodeDataDiskCount'))]",
          "input": {
            "lun": "[copyIndex('wnDatadisks')]",
            "createOption": "Empty",
            "diskSizeGB": "[parameters('workerNodeDataDiskSize')]",
            "managedDisk": {
              "storageAccountType": "[parameters('workerNodeDataDiskType')]"
            }
          }
        }
      ]
    },
    "adminSshSetting": {
      "path": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
      "keyData": "[parameters('adminSshPublicKey')]"
    },
    "hpcUserSshSetting": {
      "path": "[concat('/root/', parameters('hpcUserName'), '.ssh.authorized_keys')]",
      "keyData": "[parameters('hpcUserSshPublicKey')]"
    },
    "adminPublicKeys": "[if(empty(parameters('adminSshPublicKey')), variables('emptyArray'), array(variables('adminSshSetting')))]",
    "allPublicKeys": "[if(empty(parameters('hpcUserSshPublicKey')), variables('adminPublicKeys'), concat(variables('adminPublicKeys'), array(variables('hpcUserSshSetting'))))]",
    "workerNodeNicNamePrefix": "[concat('nic-', parameters('workerNodeNamePrefix'))]",
    "clusterFilesystem": "[split(parameters('clusterFilesystem'), ':')[0]]",
    "clusterFilesystemStorageLocation": "[split(parameters('clusterFilesystem'), ':')[1]]",
    "schedulerName": "[split(parameters('scheduler'), '_')[0]]",
    "schedulerVersion": "[split(parameters('scheduler'), '_')[1]]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('networkSettings').virtualNetworkName)]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('networkSettings').subnet.dse.name)]",
    "slurmInstallFileUris": [
      "[uri(parameters('scriptBaseLocation'), concat('azuredeploy.sh', parameters('scriptBaseLocationSasToken')))]",
      "[uri(parameters('scriptBaseLocation'), concat('slurm.template.conf', parameters('scriptBaseLocationSasToken')))]",
      "[uri(parameters('scriptBaseLocation'), concat('slurmctld.service', parameters('scriptBaseLocationSasToken')))]",
      "[uri(parameters('scriptBaseLocation'), concat('slurmd.service', parameters('scriptBaseLocationSasToken')))]"
    ],
    "pbsproInstallFileUris": [
      "[uri(parameters('scriptBaseLocation'), concat('azuredeploy.sh', parameters('scriptBaseLocationSasToken')))]"
    ],
    "InstallFileUris": "[if(equals(variables('schedulerName'), 'Slurm'), variables('slurmInstallFileUris'), variables('pbsproInstallFileUris'))]",
    "isHpcImage": "[if(parameters('rdmaDriverInstalled'), 'Yes', 'No')]",
    "installationCLI": "[concat('bash azuredeploy.sh ', parameters('headNodeName'), ' ', parameters('workerNodeNamePrefix'), ' ', parameters('workerNodeCount'), ' ', parameters('hpcUserName'), ' ', variables('clusterFilesystem'), ' ', variables('clusterFilesystemStorageLocation'), ' ', variables('isHpcImage'), ' ', variables('schedulerName'), ' ', variables('schedulerVersion'), ' ', parameters('installEasybuild'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('networkSettings').virtualNetworkName]",
      "apiVersion": "2018-08-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('networkSettings').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('networkSettings').subnet.dse.name]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnet.dse.prefix]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "sku": {
        "name": "Aligned"
      },
      "name": "[variables('avSetName')]",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": "2",
        "platformUpdateDomainCount": "5"
      }
    },
    {
      "condition": "[equals(parameters('publicIPCreateOption'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "apiVersion": "2018-08-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('publicIPSku')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
        "dnsSettings": "[if(empty(parameters('publicIPDNSNameLabel')), json('null'), variables('publicIPDnsSettings'))]"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "apiVersion": "2018-08-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('headNodeNicName')]",
      "apiVersion": "2018-08-01",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('networkSettings').statics.master]",
              "publicIPAddress": {
                "id": "[resourceId(parameters('publicIPResourceGroupName'), 'Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('headNodeName')]",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "StorageConfiguration": "[concat('{\"AccountName\":\"', parameters('acmStorageAccountName'), '\" }')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('headNodeSize')]"
        },
        "osProfile": {
          "computername": "[parameters('headNodeName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[if(empty(parameters('adminPassword')), json('null'), parameters('adminPassword'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[empty(parameters('adminPassword'))]",
            "ssh": {
              "publicKeys": "[variables('allPublicKeys')]"
            }
          }
        },
        "storageProfile": {
          "imageReference": "[parameters('nodeImage')]",
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('headNodeOsDiskType')]"
            }
          },
          "dataDisks": "[if(equals(parameters('headNodeDataDiskCount'), 0), variables('emptyArray'), variables('headNodeDataDisks').hnDataDisks)]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('headNodeNicName'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('headNodeNicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('headNodeName'), '/Installation')]",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": "[variables('installFileUris')]",
          "commandToExecute": "[variables('installationCLI')]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('headNodeName'))]",
        "[concat('Microsoft.Compute/virtualMachines/', parameters('headNodeName'), '/extensions/HpcAcmAgent')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('headNodeName'), '/HpcAcmAgent')]",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.HpcPack",
        "type": "HpcAcmAgent",
        "typeHandlerVersion": "1.0",
        "settings": {}
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('headNodeName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('workerNodeNamePrefix'), copyindex(), '/Installation')]",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "foo",
        "count": "[parameters('workerNodeCount')]"
      },
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": "[variables('installFileUris')]",
          "commandToExecute": "[variables('installationCLI')]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('headNodeName'), '/extensions/Installation')]",
        "[concat('Microsoft.Compute/virtualMachines/', parameters('workerNodeNamePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/virtualMachines/', parameters('workerNodeNamePrefix'), copyindex(), '/extensions/HpcAcmAgent')]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('workerNodeNamePrefix'), copyindex(), '/HpcAcmAgent')]",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "workerAcmAgent",
        "count": "[parameters('workerNodeCount')]"
      },
      "properties": {
        "publisher": "Microsoft.HpcPack",
        "type": "HpcAcmAgent",
        "typeHandlerVersion": "1.0",
        "settings": {}
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('workerNodeNamePrefix'), copyindex())]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('workerNodeNicNamePrefix'), copyindex())]",
      "apiVersion": "2018-08-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "workerNic",
        "count": "[parameters('workerNodeCount')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('networkSettings').statics.workerRange.base, copyindex(variables('networkSettings').statics.workerRange.start))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[guid(resourceGroup().id, parameters('headNodeName'))]",
      "apiVersion": "2017-09-01",
      "properties": {
        "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
        "principalId": "[reference(concat(resourceId('Microsoft.Compute/virtualMachines/', parameters('headNodeName')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]",
        "scope": "[concat(subscription().id, '/resourcegroups/', parameters('acmStorageAccountResourceGroup'))]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('headNodeName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[guid(resourceGroup().id, concat(parameters('workerNodeNamePrefix'), copyindex()))]",
      "apiVersion": "2017-09-01",
      "copy": {
        "name": "workerRoleAssignment",
        "count": "[parameters('workerNodeCount')]"
      },
      "properties": {
        "roleDefinitionId": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
        "principalId": "[reference(concat(resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('workerNodeNamePrefix'), copyindex())), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]",
        "scope": "[concat(subscription().id, '/resourcegroups/', parameters('acmStorageAccountResourceGroup'))]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('workerNodeNamePrefix'), copyindex())]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('workerNodeNamePrefix'), copyindex())]",
      "apiVersion": "2018-10-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "workerVM",
        "count": "[parameters('workerNodeCount')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "StorageConfiguration": "[concat('{\"AccountName\":\"', parameters('acmStorageAccountName'), '\" }')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('workerNodeSize')]"
        },
        "osProfile": {
          "computername": "[concat(parameters('workerNodeNamePrefix'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[if(empty(parameters('adminPassword')), json('null'), parameters('adminPassword'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[empty(parameters('adminPassword'))]",
            "ssh": {
              "publicKeys": "[variables('adminPublicKeys')]"
            }
          }
        },
        "storageProfile": {
          "imageReference": "[parameters('nodeImage')]",
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('workerNodeOsDiskType')]"
            }
          },
          "dataDisks": "[if(equals(parameters('workerNodeDataDiskCount'), 0), variables('emptyArray'), variables('workerNodeDataDisks').wnDataDisks)]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('workerNodeNicNamePrefix'), copyindex()))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('workerNodeNicNamePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('avSetName'))]"
      ]
    }
  ]
}
